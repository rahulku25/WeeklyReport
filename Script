import pandas as pd
import matplotlib.pyplot as plt
from dateutil.parser import parse

# --- Load the data ---
file_path = r'C:\Users\rahulku\OneDrive - Radware LTD\Desktop\Code\Weekly.csv'
df = pd.read_csv(file_path)

# --- Data Preprocessing ---
# Use dateutil.parser.parse to parse the 'Day of the Month' column
df['Day of the Month'] = df['Day of the Month'].apply(lambda x: parse(str(x)))

# If there are any invalid dates, we can fill them with a specific date (e.g., 2024-11-22)
df['Day of the Month'] = df['Day of the Month'].fillna(pd.to_datetime('2024-11-22'))

# Filter out rows where the category is 'Anomalies'
df = df[df['category'] != 'Anomalies']

# Filter data to include only the last 7 days based on the most recent date in the data
latest_date = df['Day of the Month'].max()
last_7_days_df = df[df['Day of the Month'] >= (latest_date - pd.Timedelta(days=7))]

# Convert the necessary columns to numeric values, handling non-numeric entries gracefully
last_7_days_df['maxAttackPacketRatePps'] = pd.to_numeric(last_7_days_df['maxAttackPacketRatePps'], errors='coerce')
last_7_days_df['maxAttackRateBps'] = pd.to_numeric(last_7_days_df['maxAttackRateBps'], errors='coerce')

# --- Create Table: Number of Events per Day ---
events_per_day = last_7_days_df.groupby('Day of the Month').size().reset_index(name='Number of Events')

# Sort the events table by the day of the month and keep only the last 7 days
events_per_day = events_per_day.sort_values(by='Day of the Month', ascending=False).head(7)

# --- Table 1: Top 10 by maxAttackPacketRatePps ---
top_10_packet_rate_df = last_7_days_df.sort_values(by='maxAttackPacketRatePps', ascending=False).head(10)

# --- Table 2: Top 10 by maxAttackRateBps ---
top_10_attack_rate_df = last_7_days_df.sort_values(by='maxAttackRateBps', ascending=False).head(10)

# --- Pie Chart 1: Top 5 DDoS Categories by Cumulative Bandwidth (maxAttackRateBps) ---
top_attack_data = last_7_days_df.groupby('category').agg({'maxAttackRateBps': 'sum'})
top_attack_data = top_attack_data.sort_values(by='maxAttackRateBps', ascending=False).head(5)

# Save the pie chart for categories by cumulative bandwidth
category_pie_chart_path = 'category_pie_chart_last_7_days_no_anomalies.png'

# Set figure size and plot with better visibility
plt.figure(figsize=(10, 10))  # Larger figure to accommodate the text

# Plot the pie chart
ax = top_attack_data['maxAttackRateBps'].plot(kind='pie', 
                                              autopct='%1.1f%%', 
                                              title="Top 5 DDoS Categories by Cumulative Bandwidth (maxAttackRateBps) - Last 7 Days (Excluding Anomalies)",
                                              startangle=90, 
                                              labeldistance=1.1,   # Increase this value to move labels further out
                                              fontsize=12,         # Adjust the font size of the labels
                                              pctdistance=0.85)    # Adjust the percentage label distance from the center

# Adjust labels to make them vertical
for text in ax.texts:
    text.set_rotation('vertical')  # Make the label text vertical

plt.ylabel('')  # Hide the ylabel to avoid overlapping text
plt.tight_layout()  # Adjust layout to ensure the plot is well-fitted
plt.savefig(category_pie_chart_path)
plt.close()

# --- Pie Chart 2: DDoS Attack Distribution by Category ---
attack_type_distribution = last_7_days_df['category'].value_counts()

# Save the pie chart for attack distribution
attack_distribution_pie_chart_path = 'attack_distribution_pie_chart_last_7_days_no_anomalies.png'

# Set figure size and plot with better visibility
plt.figure(figsize=(19, 19))  # Larger figure to accommodate the text

# Plot the pie chart
ax = attack_type_distribution.plot(kind='pie', 
                                   autopct='%1.1f%%', 
                                   title="DDoS Attack Distribution by Category - Last 7 Days (Excluding Anomalies)",
                                   startangle=90, 
                                   labeldistance=1.1,   # Increase this value to move labels further out
                                   fontsize=12,         # Adjust the font size of the labels
                                   pctdistance=0.85)    # Adjust the percentage label distance from the center

# Adjust labels to make them vertical
for text in ax.texts:
    text.set_rotation('vertical')  # Make the label text vertical

plt.ylabel('')  # Hide the ylabel to avoid overlapping text
plt.tight_layout()  # Adjust layout to ensure the plot is well-fitted
plt.savefig(attack_distribution_pie_chart_path)
plt.close()

# --- Pie Chart 3: Top 5 Devices by Bandwidth (maxAttackPacketRatePps) ---
device_bandwidth = last_7_days_df.groupby('Device Name').agg({'maxAttackPacketRatePps': 'sum'})
device_bandwidth = device_bandwidth.sort_values(by='maxAttackPacketRatePps', ascending=False).head(5)

# Save the pie chart for top devices by bandwidth
device_pie_chart_path = 'device_pie_chart_last_7_days_no_anomalies.png'

# Set figure size and plot with better visibility
plt.figure(figsize=(8, 8))  # Larger figure to accommodate the text

# Plot the pie chart
ax = device_bandwidth['maxAttackPacketRatePps'].plot(kind='pie', 
                                                    autopct='%1.1f%%', 
                                                    title="Top 5 Devices by Bandwidth (maxAttackPacketRatePps) - Last 7 Days (Excluding Anomalies)",
                                                    startangle=90, 
                                                    labeldistance=1.1,   # Increase this value to move labels further out
                                                    fontsize=12,         # Adjust the font size of the labels
                                                    pctdistance=0.85)    # Adjust the percentage label distance from the center

# Adjust labels to make them vertical
for text in ax.texts:
    text.set_rotation('vertical')  # Make the label text vertical

plt.ylabel('')  # Hide the ylabel to avoid overlapping text
plt.tight_layout()  # Adjust layout to ensure the plot is well-fitted
plt.savefig(device_pie_chart_path)
plt.close()

# --- Export everything to an HTML file ---
html_file_path = 'top_10_ddos_report_last_7_days_no_anomalies.html'
with open(html_file_path, 'w') as f:
    # Write the "Number of Events per Day" table (restrict to the last 7 days)
    f.write('<h2>Number of Events per Day - Last 7 Days (Excluding Anomalies)</h2>')
    f.write(events_per_day.to_html(index=False))
    f.write('<br><br>')  # Add space between tables

    # Write the first table (Top 10 by maxAttackPacketRatePps) including Device Name and Policy Name
    f.write('<h2>Top 10 by maxAttackPacketRatePps - Last 7 Days (Excluding Anomalies)</h2>')
    f.write(top_10_packet_rate_df[['Device Name', 'Policy Name', 'startDate', 'protocol', 'actionType', 'destAddress', 'Attack Name', 'maxAttackPacketRatePps']].to_html(index=False))
    f.write('<br><br>')  # Add space between tables
    
    # Write the second table (Top 10 by maxAttackRateBps) including Device Name and Policy Name
    f.write('<h2>Top 10 by maxAttackRateBps - Last 7 Days (Excluding Anomalies)</h2>')
    f.write(top_10_attack_rate_df[['Device Name', 'Policy Name', 'startDate', 'protocol', 'actionType', 'destAddress', 'Attack Name', 'maxAttackRateBps']].to_html(index=False))

    # Add the pie charts to the HTML file
    f.write('<br><br>')
    f.write('<h2>Top 5 DDoS Categories by Cumulative Bandwidth (Excluding Anomalies)</h2>')
    f.write(f'<img src="{category_pie_chart_path}" alt="Top 5 DDoS Categories by Cumulative Bandwidth" style="width:80%"><br><br>')

    f.write('<h2>DDoS Attack Distribution by Attack Category (Excluding Anomalies)</h2>')
    f.write(f'<img src="{attack_distribution_pie_chart_path}" alt="DDoS Attack Distribution by Attack Category" style="width:80%"><br><br>')

    f.write('<h2>Top 5 Devices by Bandwidth (Excluding Anomalies)</h2>')
    f.write(f'<img src="{device_pie_chart_path}" alt="Top 5 Devices by Bandwidth" style="width:80%"><br><br>')

print(f"HTML file '{html_file_path}' has been generated with both tables and pie charts for the last 7 days excluding Anomalies.")  

# Example of timestamp parsing with dateutil.parser
timestamp_string = "2024-11-22 11:30:45"
datetime_object = parse(timestamp_string)
print(datetime_object)
